=========================================================
Examples Distributed with ATHENa 0.6.2
=========================================================

Introduction
============

This folder contains several examples
of designs prepared for evaluation using ATHENa.

Each example consists of the following files:
 - synthesizeable source codes written in VHDL
 - testbench file(s) written in VHDL
 - source list with the source file names listed in the order
   of hierarchy, using bottom-up approach
   [file: source_list.txt]

 - main configuration file for ATHENa: design.config.txt;
   this configuration file is set to a single_run
   for two Xilinx FPGA families (Spartan 3 and Virtex 5),
   and two Altera FPGA families (Cyclone II and Stratix III),
   Please review and possibly modify these configuration
   files before you run ATHENa for a given example.

Assuming that ATHENa has been earlier correctly installed
and set up (based on the instructions provided in the tutorial),
please follow the following simple steps to execute ATHENa 
for a given example:

 1. copy design.config.txt of the given example
   to the directory <ATHENa_root_directory>/config

   ATHENa root directory is the main directory where you 
   have unpacked the ATHENa toolset.
   Overwrite the default or previously used design.config.txt.
   The default design.config.txt corresponds to the example
   sha256_rs and is duplicated in the file
   <ATHENa_root_directory>/config/design.config_sha256_rs.txt.

 2. For the Windows version 
       run ATHENa.bat (for example by clicking on its icon); 
    for the Linux version 
       run ATHENa.sh.


Description of Examples
=======================

=========
sha256_rs
=========

Category: Cryptographic

Algorithm:  
   SHA-256: Secure Hash Algorithm with the hash size equal to 256 bits.
   Part of the current American Federal Information Processing Standard, FIPS 180-3.

   See 
     http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf

Architecture:
   Architecture with rescheduling developed by Chaves et al.

   See
   R. Chaves, G. Kuzmanov, L. Sousa, and S. Vassiliadis, 
    "Cost-efficient SHA hardware accelerators," IEEE Transactions
    on Very Large Scale Integration Systems, Aug. 2008, pp. 999-1008.
	
	

============
test_circuit
============

Category:  Computer arithmetic

Desription:
  A scalable design using embedded resources of modern FPGAs, namely: 
  block memories, DSP units, and/or embedded multipliers. 

  This example also demonstrates the use of generics with ATHENa,
  and searching through multiple combinations of generics
  using a single ATHENa run.

The major components of the design are

1)  Pseudorandom Number Generators: 
      Based on Linear Feedback Shift Registers (LFSRs).
      Implemented using logic resources of FPGAs.
      Generate 8-bit addresses for ROMs.

2)  8-bit Adders:  
      Based on Simple Carry Chain Adders ("+" in VHDL) or DSP units.

3)  8x8 Unsigned Multipliers:  
      Based on logic, DSP units, or embedded multipliers.

4)  256x8 bit ROMs with Synchronous Output:  
      Distributed or embedded.

The size of the circuit (number of stages)
can be scaled to fit the number of embedded resource units
available in a given FPGA family.

Refer to the folder 
   test_circuit/Block Diagram
for a detailed block diagram of the main circuit and its component,
the pseudorandom number generator.

The testbench compares results generated by two instantiations
of the circuit using two different sets of generics.


===============
coregen_example
===============

Category:  Computer arithmetic

Desription:
  An example of using ATHENa together with Xilinx CORE Generator.
  The circuit implements 32-bit addition using DSP unit of Virtex 5.


==================
megawizard_example
==================

Category:  Computer arithmetic

Desription:
  An example of using ATHENa together with Altera MegaWizard Plug-in Manager.
  The circuit implements 16-bit unsigned multiplication using embedded multipliers of Cyclone III.


=========
fugue
=========

Category: Cryptographic

Algorithm:  
   Fugue-256: Cryptographic hash function. One of 14 Round 2 candidates for the new
   American Federal Information Processing Standard, SHA-3.

   See 
     http://domino.research.ibm.com/comm/research_projects.nsf/pages/fugue.index.html/$FILE/fugue_09.pdf
     http://domino.research.ibm.com/comm/research_projects.nsf/pages/fugue.index.html

Architecture:
   Architecture described in Chapter 3.7 of
   Cryptology ePrint Archive Report 2010/445
   available at
        http://eprint.iacr.org/2010/445


============
arraymult
============

Category:  Computer arithmetic

Description:
    Array Multiplier.

    See for example:
      Lecture 7: Tree and Array Multipliers, at
      http://ece.gmu.edu/coursewebpages/ECE/ECE645/S10/

     and/or

     B. Parhami, Computer Arithmetic: Algorithms and Hardware Designs, 
     2nd edition, Oxford University Press, New York, 2010. 
     Chapter 11, Tree and Array Multipliers.


=========
3des_unit
=========

Category: Cryptographic

Algorithm:  
   3 DES : Triple Data Encryption Standard. 
   Part of the current American Federal Information Processing Standard, FIPS 46-3.

   See 
	http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf

Architecture:
   Basic loop architecture (also known as basic iterative architecture),
   executing one step of 3 DES per clock cycle. It supports up to 168 bits
   of key and ECB/CBC modes. It is also an example of using ATHENa together
   with AHDL source codes.